#!/usr/bin/env python
# encoding: utf-8
# Kohei Ozaki, 2010

import Options

top = '.'
out = 'build'

APPNAME = 'gll'
VERSION = '0.0.1'

def set_options(opt):
    opt.tool_options('compiler_cxx')
    opt.tool_options('unittestt')

    # build benchmark
    opt.add_option('--bench',
                   action  = 'store_true',
                   default = False,
                   help    = 'benchmark')

def configure(conf):
    conf.check_tool('compiler_cxx')
    conf.check_tool('unittestt')

    conf.check_cxx(header_name = 'gtest/gtest_prod.h')
    conf.write_config_header('src/gtllconfig.h', top=True)
    conf.env.store('conf.log')

def build(bld):
    bld.add_subdirs('src/gtll')
    # build benchmark
    # if Options.options.bench:
    #    bld.add_subdirs('bench')

    # how to check config.h
    headers = ['src/gtll/gll.hpp',
               'src/gtll/data.hpp',
               'src/gtll/similar.hpp',
               'src/gtll/sparsify.hpp',
               'src/gtll/infer.hpp',
               'src/gtll/infer_impl.hpp',
               'src/gtll/infer_labelpropagation_impl.hpp',
               'src/gtll/infer_localglobal_impl.hpp',
               ]
    # todo: collect library interface into 'src/gtll.hpp'
    bld.install_files('${PREFIX}/include/gtll', headers)
    bld.install_files('${PREFIX}/include/gtll', 'src/gtllconfig.h')

def shutdown(shd):
    if Options.options.bench:
        memcheck = "valgrind --leak-check=full"
        target = "build/default/src/gll_unittest"
        import os
        os.popen("%s %s" % (memcheck, target))
